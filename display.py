
palette_data = [(0x7F, 0x7F, 0x7F), (0x20, 0x00, 0xB0), (0x28, 0x00, 0xB8), (0x60, 0x10, 0xA0),
                (0x98, 0x20, 0x78), (0xB0, 0x10, 0x30), (0xA0, 0x30, 0x00), (0x78, 0x40, 0x00),
                (0x48, 0x58, 0x00), (0x38, 0x68, 0x00), (0x38, 0x6C, 0x00), (0x30, 0x60, 0x40),
                (0x30, 0x50, 0x80), (0x00, 0x00, 0x00), (0x00, 0x00, 0x00), (0x00, 0x00, 0x00),

                (0xBC, 0xBC, 0xBC), (0x40, 0x60, 0xF8), (0x40, 0x40, 0xFF), (0x90, 0x40, 0xF0),
                (0xD8, 0x40, 0xC0), (0xD8, 0x40, 0x60), (0xE0, 0x50, 0x00), (0xC0, 0x70, 0x00),
                (0x88, 0x88, 0x00), (0x50, 0xA0, 0x00), (0x48, 0xA8, 0x10), (0x48, 0xA0, 0x68),
                (0x40, 0x90, 0xC0), (0x00, 0x00, 0x00), (0x00, 0x00, 0x00), (0x00, 0x00, 0x00),

                (0xFF, 0xFF, 0xFF), (0x60, 0xA0, 0xFF), (0x50, 0x80, 0xFF), (0xA0, 0x70, 0xFF),
                (0xF0, 0x60, 0xFF), (0xFF, 0x60, 0xB0), (0xFF, 0x78, 0x30), (0xFF, 0xA0, 0x00),
                (0xE8, 0xD0, 0x20), (0x98, 0xE8, 0x00), (0x70, 0xF0, 0x40), (0x70, 0xE0, 0x90),
                (0x60, 0xD0, 0xE0), (0x60, 0x60, 0x60), (0x00, 0x00, 0x00), (0x00, 0x00, 0x00),

                (0xFF, 0xFF, 0xFF), (0x90, 0xD0, 0xFF), (0xA0, 0xB8, 0xFF), (0xC0, 0xB0, 0xFF),
                (0xE0, 0xB0, 0xFF), (0xFF, 0xB8, 0xE8), (0xFF, 0xC8, 0xB8), (0xFF, 0xD8, 0xA0),
                (0xFF, 0xF0, 0x90), (0xC8, 0xF0, 0x80), (0xA0, 0xF0, 0xA0), (0xA0, 0xFF, 0xC8),
                (0xA0, 0xFF, 0xF0), (0xA0, 0xA0, 0xA0), (0x00, 0x00, 0x00), (0x00, 0x00, 0x00)]


def get_pixel(x, y, ppu):
    name_table_index = 0  # TODO
    pattern_base = 0x1000 if ppu.ppu_ctrl.bit4 else 0

    tile_id = (x >> 3) + (y >> 3) * 32
    pattern_tables_id = ppu.name_tables[tile_id + name_table_index * 0x400]

    pattern1 = pattern_tables_id * 16 | pattern_base
    pattern2 = pattern1 + 8 | pattern_base

    offset = y & 0x7
    p0 = ppu.pattern_tables[pattern1 + offset]
    p1 = ppu.pattern_tables[pattern2 + offset]

    shift = (~x) & 0x7
    mask = 1 << shift

    low = ((p0 & mask) >> shift) | ((p1 & mask) >> shift << 1)

    aid = (x >> 5) + (y >> 5) * 8
    attr = ppu.name_tables[name_table_index * 0x400 + aid + (32 * 30)]

    aoffset = ((x & 0x10) >> 3) | ((y & 0x10) >> 2)
    high = (attr & (3 << aoffset)) >> aoffset << 2

    index = high | low

    return palette_data[ppu.palette[index]]


def get_sprites(screen, ppu):
    pattern_base = 0x1000 if ppu.ppu_ctrl.bit3 else 0
    is_8x16_mode = ppu.ppu_ctrl.bit5
    for i in range(63, -1, -1):
        data = ppu.oam[i * 4: i * 4 + 4]
        x, y, attr, pattern_index = data[3], data[0] + 1, data[2], data[1]
        if is_8x16_mode:
            pattern1 = pattern_index // 2 * 0x20 + (0 if x % 2 else 0x1000)
            pattern2 = pattern1 + 16
        else:
            pattern1 = pattern_base | pattern_index * 16
            pattern2 = pattern_base | pattern1 + 8

        high = (attr & 3) << 2
        for yy in range(16 if is_8x16_mode else 8):
            for xx in range(8):
                p0 = ppu.pattern_tables[pattern1 + yy]
                p1 = ppu.pattern_tables[pattern2 + yy]

                shift = (~xx) & 0x7
                mask = 1 << shift

                low = ((p0 & mask) >> shift) | ((p1 & mask) >> shift << 1)
                if low == 0:
                    continue
                screen.set_at((x+xx, y+yy), palette_data[ppu.palette[0x10 + high | low]])
